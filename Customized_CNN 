{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Convolutional Neural Networks: Application\n",
    "\n",
    "Welcome to Course 4's second assignment! In this notebook, you will:\n",
    "\n",
    "- Implement helper functions that you will use when implementing a TensorFlow model\n",
    "- Implement a fully functioning ConvNet using TensorFlow \n",
    "\n",
    "**After this assignment you will be able to:**\n",
    "\n",
    "- Build and train a ConvNet in TensorFlow for a classification problem \n",
    "\n",
    "We assume here that you are already familiar with TensorFlow. If you are not, please refer the *TensorFlow Tutorial* of the third week of Course 2 (\"*Improving deep neural networks*\")."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 1.0 - TensorFlow model\n",
    "\n",
    "In the previous assignment, you built helper functions using numpy to understand the mechanics behind convolutional neural networks. Most practical applications of deep learning today are built using programming frameworks, which have many built-in functions you can simply call. \n",
    "\n",
    "As usual, we will start by loading in the packages. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "2"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "1 + 1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/pro/anaconda3/lib/python3.6/site-packages/sklearn/cross_validation.py:41: DeprecationWarning: This module was deprecated in version 0.18 in favor of the model_selection module into which all the refactored classes and functions are moved. Also note that the interface of the new CV iterators are different from that of this module. This module will be removed in 0.20.\n",
      "  \"This module will be removed in 0.20.\", DeprecationWarning)\n"
     ]
    }
   ],
   "source": [
    "import math\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "from scipy import ndimage\n",
    "import tensorflow as tf\n",
    "from tensorflow.python.framework import ops\n",
    "from cnn_utils import *\n",
    "from sklearn.cross_validation import train_test_split\n",
    "from sklearn.metrics import accuracy_score, recall_score\n",
    "\n",
    "%matplotlib inline\n",
    "np.random.seed(1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 67,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Loading the data (signs)\n",
    "X_orig = np.load(\"dataset/Few_data_train_test.npy\")\n",
    "Y_orig = np.load(\"dataset/Few_labels_train_test.npy\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "metadata": {},
   "outputs": [],
   "source": [
    "X_orig = X_orig[0:600]\n",
    "Y_orig = Y_orig[0:600]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 68,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(2000, 128, 128, 3)"
      ]
     },
     "execution_count": 68,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X_orig.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 69,
   "metadata": {},
   "outputs": [],
   "source": [
    "X_train_orig, X_test_orig, y_train_orig, y_test_orig = train_test_split(X_orig, Y_orig, test_size=0.33, random_state=42)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 70,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(1340,)"
      ]
     },
     "execution_count": 70,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y_train_orig.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 71,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(1340, 128, 128, 3)"
      ]
     },
     "execution_count": 71,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X_train_orig.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 72,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(660,)"
      ]
     },
     "execution_count": 72,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y_test_orig.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 73,
   "metadata": {},
   "outputs": [],
   "source": [
    "Y_train_orig = y_train_orig.reshape(1,y_train_orig.shape[0])\n",
    "Y_test_orig = y_test_orig.reshape(1,y_test_orig.shape[0])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 74,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(1, 660)"
      ]
     },
     "execution_count": 74,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Y_test_orig.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 75,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "y = 0\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x1c302f8438>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Example of a picture\n",
    "index = 7\n",
    "plt.imshow(X_train_orig[index])\n",
    "print (\"y = \" + str(np.squeeze(Y_train_orig[:, index])))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 76,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[1, 1, 0, ..., 1, 1, 1]])"
      ]
     },
     "execution_count": 76,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Y_train_orig"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "In Course 2, you had built a fully-connected network for this dataset. But since this is an image dataset, it is more natural to apply a ConvNet to it.\n",
    "\n",
    "To get started, let's examine the shapes of your data. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 77,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "number of training examples = 1340\n",
      "number of test examples = 660\n",
      "X_train shape: (1340, 128, 128, 3)\n",
      "Y_train shape: (1340, 2)\n",
      "X_test shape: (660, 128, 128, 3)\n",
      "Y_test shape: (660, 2)\n"
     ]
    }
   ],
   "source": [
    "X_train = X_train_orig/255.\n",
    "X_test = X_test_orig/255.\n",
    "Y_train = convert_to_one_hot(Y_train_orig, 2).T\n",
    "Y_test = convert_to_one_hot(Y_test_orig, 2).T\n",
    "print (\"number of training examples = \" + str(X_train.shape[0]))\n",
    "print (\"number of test examples = \" + str(X_test.shape[0]))\n",
    "print (\"X_train shape: \" + str(X_train.shape))\n",
    "print (\"Y_train shape: \" + str(Y_train.shape))\n",
    "print (\"X_test shape: \" + str(X_test.shape))\n",
    "print (\"Y_test shape: \" + str(Y_test.shape))\n",
    "conv_layers = {}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 78,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(660, 2)"
      ]
     },
     "execution_count": 78,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Y_test.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([ 95., 103.])"
      ]
     },
     "execution_count": 60,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Y_test.sum(axis=0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[0., 1.],\n",
       "       [0., 1.],\n",
       "       [0., 1.],\n",
       "       [1., 0.],\n",
       "       [1., 0.],\n",
       "       [0., 1.],\n",
       "       [1., 0.],\n",
       "       [1., 0.],\n",
       "       [0., 1.],\n",
       "       [0., 1.],\n",
       "       [0., 1.],\n",
       "       [0., 1.],\n",
       "       [1., 0.],\n",
       "       [1., 0.],\n",
       "       [1., 0.],\n",
       "       [0., 1.],\n",
       "       [0., 1.],\n",
       "       [0., 1.],\n",
       "       [1., 0.],\n",
       "       [0., 1.],\n",
       "       [0., 1.],\n",
       "       [0., 1.],\n",
       "       [1., 0.],\n",
       "       [0., 1.],\n",
       "       [0., 1.],\n",
       "       [1., 0.],\n",
       "       [1., 0.],\n",
       "       [0., 1.],\n",
       "       [0., 1.],\n",
       "       [0., 1.],\n",
       "       [1., 0.],\n",
       "       [1., 0.],\n",
       "       [0., 1.]])"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Y_test"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "collapsed": true
   },
   "source": [
    "### 1.1 - Create placeholders\n",
    "\n",
    "TensorFlow requires that you create placeholders for the input data that will be fed into the model when running the session.\n",
    "\n",
    "**Exercise**: Implement the function below to create placeholders for the input image X and the output Y. You should not define the number of training examples for the moment. To do so, you could use \"None\" as the batch size, it will give you the flexibility to choose it later. Hence X should be of dimension **[None, n_H0, n_W0, n_C0]** and Y should be of dimension **[None, n_y]**.  [Hint](https://www.tensorflow.org/api_docs/python/tf/placeholder)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [],
   "source": [
    "# GRADED FUNCTION: create_placeholders\n",
    "\n",
    "def create_placeholders(n_H0, n_W0, n_C0, n_y):\n",
    "    \"\"\"\n",
    "    Creates the placeholders for the tensorflow session.\n",
    "    \n",
    "    Arguments:\n",
    "    n_H0 -- scalar, height of an input image\n",
    "    n_W0 -- scalar, width of an input image\n",
    "    n_C0 -- scalar, number of channels of the input\n",
    "    n_y -- scalar, number of classes\n",
    "        \n",
    "    Returns:\n",
    "    X -- placeholder for the data input, of shape [None, n_H0, n_W0, n_C0] and dtype \"float\"\n",
    "    Y -- placeholder for the input labels, of shape [None, n_y] and dtype \"float\"\n",
    "    \"\"\"\n",
    "\n",
    "    ### START CODE HERE ### (≈2 lines)\n",
    "    X = tf.placeholder(dtype = tf.float32, shape = [None, n_H0, n_W0, n_C0], name = \"X\")\n",
    "    Y = tf.placeholder(dtype = tf.float32, shape = [None, n_y] ,name = \"X\")\n",
    "    ### END CODE HERE ###\n",
    "    \n",
    "    return X, Y"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "X = Tensor(\"X:0\", shape=(?, 128, 128, 3), dtype=float32)\n",
      "Y = Tensor(\"X_1:0\", shape=(?, 2), dtype=float32)\n"
     ]
    }
   ],
   "source": [
    "X, Y = create_placeholders(128, 128, 3, 2)\n",
    "print (\"X = \" + str(X))\n",
    "print (\"Y = \" + str(Y))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Expected Output**\n",
    "\n",
    "<table> \n",
    "<tr>\n",
    "<td>\n",
    "    X = Tensor(\"Placeholder:0\", shape=(?, 64, 64, 3), dtype=float32)\n",
    "\n",
    "</td>\n",
    "</tr>\n",
    "<tr>\n",
    "<td>\n",
    "    Y = Tensor(\"Placeholder_1:0\", shape=(?, 6), dtype=float32)\n",
    "\n",
    "</td>\n",
    "</tr>\n",
    "</table>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 1.2 - Initialize parameters\n",
    "\n",
    "You will initialize weights/filters $W1$ and $W2$ using `tf.contrib.layers.xavier_initializer(seed = 0)`. You don't need to worry about bias variables as you will soon see that TensorFlow functions take care of the bias. Note also that you will only initialize the weights/filters for the conv2d functions. TensorFlow initializes the layers for the fully connected part automatically. We will talk more about that later in this assignment.\n",
    "\n",
    "**Exercise:** Implement initialize_parameters(). The dimensions for each group of filters are provided below. Reminder - to initialize a parameter $W$ of shape [1,2,3,4] in Tensorflow, use:\n",
    "```python\n",
    "W = tf.get_variable(\"W\", [1,2,3,4], initializer = ...)\n",
    "```\n",
    "[More Info](https://www.tensorflow.org/api_docs/python/tf/get_variable)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [],
   "source": [
    "# GRADED FUNCTION: initialize_parameters\n",
    "\n",
    "def initialize_parameters():\n",
    "    \"\"\"\n",
    "    Initializes weight parameters to build a neural network with tensorflow. The shapes are:\n",
    "                        W1 : [8, 8, 3, 8]\n",
    "                        W2 : [4, 4, 8, 16]\n",
    "                        W3 : [2, 2, 16, 32]\n",
    "    Returns:\n",
    "    parameters -- a dictionary of tensors containing W1, W2\n",
    "    \"\"\"\n",
    "    \n",
    "    tf.set_random_seed(1)                              # so that your \"random\" numbers match ours\n",
    "        \n",
    "    ### START CODE HERE ### (approx. 2 lines of code)\n",
    "    W1 = tf.get_variable(name = \"W1\", shape = [8, 8, 3, 8], dtype = tf.float32, initializer = tf.contrib.layers.xavier_initializer(seed = 0))\n",
    "    W2 = tf.get_variable(name = \"W2\", shape = [4, 4, 8, 16], dtype = tf.float32, initializer = tf.contrib.layers.xavier_initializer(seed = 0))\n",
    "    W3 = tf.get_variable(name = \"W3\", shape = [2, 2, 16, 32], dtype = tf.float32, initializer = tf.contrib.layers.xavier_initializer(seed = 0))\n",
    "\n",
    "    ### END CODE HERE ###\n",
    "\n",
    "    parameters = {\"W1\": W1,\n",
    "                  \"W2\": W2,\n",
    "                  \"W3\":W3}\n",
    "    \n",
    "    return parameters"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [],
   "source": [
    "parameters = initialize_parameters()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [],
   "source": [
    "init = tf.global_variables_initializer()\n",
    "with tf.Session() as sess:\n",
    "    sess.run(init)\n",
    "    X = sess.run(parameters)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(8, 8, 3, 8)\n",
      "(4, 4, 8, 16)\n",
      "(2, 2, 16, 32)\n"
     ]
    }
   ],
   "source": [
    "print(X['W1'].shape)\n",
    "print(X['W2'].shape)\n",
    "print(X['W3'].shape)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 1.2 - Forward propagation\n",
    "\n",
    "In TensorFlow, there are built-in functions that carry out the convolution steps for you.\n",
    "\n",
    "- **tf.nn.conv2d(X,W1, strides = [1,s,s,1], padding = 'SAME'):** given an input $X$ and a group of filters $W1$, this function convolves $W1$'s filters on X. The third input ([1,f,f,1]) represents the strides for each dimension of the input (m, n_H_prev, n_W_prev, n_C_prev). You can read the full documentation [here](https://www.tensorflow.org/api_docs/python/tf/nn/conv2d)\n",
    "\n",
    "- **tf.nn.max_pool(A, ksize = [1,f,f,1], strides = [1,s,s,1], padding = 'SAME'):** given an input A, this function uses a window of size (f, f) and strides of size (s, s) to carry out max pooling over each window. You can read the full documentation [here](https://www.tensorflow.org/api_docs/python/tf/nn/max_pool)\n",
    "\n",
    "- **tf.nn.relu(Z1):** computes the elementwise ReLU of Z1 (which can be any shape). You can read the full documentation [here.](https://www.tensorflow.org/api_docs/python/tf/nn/relu)\n",
    "\n",
    "- **tf.contrib.layers.flatten(P)**: given an input P, this function flattens each example into a 1D vector it while maintaining the batch-size. It returns a flattened tensor with shape [batch_size, k]. You can read the full documentation [here.](https://www.tensorflow.org/api_docs/python/tf/contrib/layers/flatten)\n",
    "\n",
    "- **tf.contrib.layers.fully_connected(F, num_outputs):** given a the flattened input F, it returns the output computed using a fully connected layer. You can read the full documentation [here.](https://www.tensorflow.org/api_docs/python/tf/contrib/layers/fully_connected)\n",
    "\n",
    "In the last function above (`tf.contrib.layers.fully_connected`), the fully connected layer automatically initializes weights in the graph and keeps on training them as you train the model. Hence, you did not need to initialize those weights when initializing the parameters. \n",
    "\n",
    "\n",
    "**Exercise**: \n",
    "\n",
    "Implement the `forward_propagation` function below to build the following model: `CONV2D -> RELU -> MAXPOOL -> CONV2D -> RELU -> MAXPOOL -> FLATTEN -> FULLYCONNECTED`. You should use the functions above. \n",
    "\n",
    "In detail, we will use the following parameters for all the steps:\n",
    "     - Conv2D: stride 1, padding is \"SAME\"\n",
    "     - ReLU\n",
    "     - Max pool: Use an 8 by 8 filter size and an 8 by 8 stride, padding is \"SAME\"\n",
    "     - Conv2D: stride 1, padding is \"SAME\"\n",
    "     - ReLU\n",
    "     - Max pool: Use a 4 by 4 filter size and a 4 by 4 stride, padding is \"SAME\"\n",
    "     - Flatten the previous output.\n",
    "     - FULLYCONNECTED (FC) layer: Apply a fully connected layer without an non-linear activation function. Do not call the softmax here. This will result in 6 neurons in the output layer, which then get passed later to a softmax. In TensorFlow, the softmax and cost function are lumped together into a single function, which you'll call in a different function when computing the cost. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [],
   "source": [
    "# GRADED FUNCTION: forward_propagation\n",
    "\n",
    "def forward_propagation(X, parameters):\n",
    "    \"\"\"\n",
    "    Implements the forward propagation for the model:\n",
    "    CONV2D -> RELU -> MAXPOOL -> CONV2D -> RELU -> MAXPOOL -> FLATTEN -> FULLYCONNECTED\n",
    "    \n",
    "    Arguments:\n",
    "    X -- input dataset placeholder, of shape (input size, number of examples)\n",
    "    parameters -- python dictionary containing your parameters \"W1\", \"W2\"\n",
    "                  the shapes are given in initialize_parameters\n",
    "\n",
    "    Returns:\n",
    "    Z3 -- the output of the last LINEAR unit\n",
    "    \"\"\"\n",
    "    \n",
    "    # Retrieve the parameters from the dictionary \"parameters\" \n",
    "    W1 = parameters['W1']\n",
    "    W2 = parameters['W2']\n",
    "    W3 = parameters['W3']\n",
    "    \n",
    "    ### START CODE HERE ###\n",
    "    # CONV2D: stride of 1, padding 'SAME'\n",
    "    Z1 = tf.nn.conv2d(X, W1, strides = [1,1,1,1], padding = \"SAME\")\n",
    "    # RELU\n",
    "    A1 = tf.nn.relu(Z1)\n",
    "    # MAXPOOL: window 8x8, sride 8, padding 'SAME'\n",
    "    P1 = tf.nn.max_pool(A1, ksize= [1,8,8,1], strides=[1,8,8,1],padding = \"SAME\")\n",
    "    # CONV2D: filters W2, stride 1, padding 'SAME'\n",
    "    Z2 = tf.nn.conv2d(P1, W2, strides = [1,1,1,1], padding = \"SAME\")\n",
    "    # RELU\n",
    "    A2 = tf.nn.relu(Z2)\n",
    "    # MAXPOOL: window 4x4, stride 4, padding 'SAME'\n",
    "    P2 = tf.nn.max_pool(A2, ksize = [1,4,4,1], strides = [1,4,4,1], padding = \"SAME\")\n",
    "    # CONV2D: filters W3, stride 1, padding 'SAME'\n",
    "    Z3 = tf.nn.conv2d(P2, W3, strides = [1,1,1,1], padding = \"SAME\")\n",
    "    # RELU\n",
    "    A3 = tf.nn.relu(Z3)\n",
    "    # MAXPOOL: window 4x4, stride 4, padding 'SAME'\n",
    "    P3 = tf.nn.max_pool(A3, ksize = [1,2,2,1], strides = [1,2,2,1], padding = \"SAME\")\n",
    "    # FLATTEN\n",
    "    P3 = tf.contrib.layers.flatten(P3)\n",
    "    # FULLY-CONNECTED without non-linear activation function (not not call softmax).\n",
    "    # 6 neurons in output layer. Hint: one of the arguments should be \"activation_fn=None\" \n",
    "    Z4 = tf.contrib.layers.fully_connected(P3,num_outputs = 2, activation_fn = None)\n",
    "    ### END CODE HERE ###\n",
    "\n",
    "    return Z4"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Expected Output**:\n",
    "\n",
    "<table> \n",
    "    <td> \n",
    "    Z3 =\n",
    "    </td>\n",
    "    <td>\n",
    "    [[-0.44670227 -1.57208765 -1.53049231 -2.31013036 -1.29104376  0.46852064] <br>\n",
    " [-0.17601591 -1.57972014 -1.4737016  -2.61672091 -1.00810647  0.5747785 ]]\n",
    "    </td>\n",
    "</table>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 1.3 - Compute cost\n",
    "\n",
    "Implement the compute cost function below. You might find these two functions helpful: \n",
    "\n",
    "- **tf.nn.softmax_cross_entropy_with_logits(logits = Z3, labels = Y):** computes the softmax entropy loss. This function both computes the softmax activation function as well as the resulting loss. You can check the full documentation  [here.](https://www.tensorflow.org/api_docs/python/tf/nn/softmax_cross_entropy_with_logits)\n",
    "- **tf.reduce_mean:** computes the mean of elements across dimensions of a tensor. Use this to sum the losses over all the examples to get the overall cost. You can check the full documentation [here.](https://www.tensorflow.org/api_docs/python/tf/reduce_mean)\n",
    "\n",
    "** Exercise**: Compute the cost below using the function above."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [],
   "source": [
    "# GRADED FUNCTION: compute_cost \n",
    "\n",
    "def compute_cost(Z4, Y):\n",
    "    \"\"\"\n",
    "    Computes the cost\n",
    "    \n",
    "    Arguments:\n",
    "    Z3 -- output of forward propagation (output of the last LINEAR unit), of shape (6, number of examples)\n",
    "    Y -- \"true\" labels vector placeholder, same shape as Z3\n",
    "    \n",
    "    Returns:\n",
    "    cost - Tensor of the cost function\n",
    "    \"\"\"\n",
    "    \n",
    "    ### START CODE HERE ### (1 line of code)\n",
    "    cost = tf.reduce_mean(tf.nn.softmax_cross_entropy_with_logits(labels = Y, logits = Z4))\n",
    "    ### END CODE HERE ###\n",
    "    \n",
    "    return cost"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [],
   "source": [
    "def compute_cost_with_L2_regularization(Z4,Y,lambd,parameters):\n",
    "    W1 = parameters[\"W1\"]\n",
    "    W2 = parameters[\"W2\"]\n",
    "    W3 = parameters[\"W3\"]\n",
    "    cost = compute_cost(Z4,Y)\n",
    "    regularizers = tf.nn.l2_loss(W1) + tf.nn.l2_loss(W2) + tf.nn.l2_loss(W3)\n",
    "    final_cost = tf.reduce_mean(cost + lambd*regularizers)\n",
    "    return final_cost"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Expected Output**: \n",
    "\n",
    "<table>\n",
    "    <td> \n",
    "    cost =\n",
    "    </td> \n",
    "    \n",
    "    <td> \n",
    "    2.91034\n",
    "    </td> \n",
    "</table>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 1.4 Model \n",
    "\n",
    "Finally you will merge the helper functions you implemented above to build a model. You will train it on the SIGNS dataset. \n",
    "\n",
    "You have implemented `random_mini_batches()` in the Optimization programming assignment of course 2. Remember that this function returns a list of mini-batches. \n",
    "\n",
    "**Exercise**: Complete the function below. \n",
    "\n",
    "The model below should:\n",
    "\n",
    "- create placeholders\n",
    "- initialize parameters\n",
    "- forward propagate\n",
    "- compute the cost\n",
    "- create an optimizer\n",
    "\n",
    "Finally you will create a session and run a for loop  for num_epochs, get the mini-batches, and then for each mini-batch you will optimize the function. [Hint for initializing the variables](https://www.tensorflow.org/api_docs/python/tf/global_variables_initializer)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 90,
   "metadata": {},
   "outputs": [],
   "source": [
    "# GRADED FUNCTION: model\n",
    "\n",
    "def model(X_train, Y_train, X_test, Y_test, learning_rate, \n",
    "          num_epochs, minibatch_size = 64, print_cost = True):\n",
    "    \"\"\"\n",
    "    Implements a three-layer ConvNet in Tensorflow:\n",
    "    CONV2D -> RELU -> MAXPOOL -> CONV2D -> RELU -> MAXPOOL -> FLATTEN -> FULLYCONNECTED\n",
    "    \n",
    "    Arguments:\n",
    "    X_train -- training set, of shape (None, 64, 64, 3)\n",
    "    Y_train -- test set, of shape (None, n_y = 6)\n",
    "    X_test -- training set, of shape (None, 64, 64, 3)\n",
    "    Y_test -- test set, of shape (None, n_y = 6)\n",
    "    learning_rate -- learning rate of the optimization\n",
    "    num_epochs -- number of epochs of the optimization loop\n",
    "    minibatch_size -- size of a minibatch\n",
    "    print_cost -- True to print the cost every 100 epochs\n",
    "    \n",
    "    Returns:\n",
    "    train_accuracy -- real number, accuracy on the train set (X_train)\n",
    "    test_accuracy -- real number, testing accuracy on the test set (X_test)\n",
    "    parameters -- parameters learnt by the model. They can then be used to predict.\n",
    "    \"\"\"\n",
    "    \n",
    "    ops.reset_default_graph()                         # to be able to rerun the model without overwriting tf variables\n",
    "    tf.set_random_seed(1)                             # to keep results consistent (tensorflow seed)\n",
    "    seed = 3                                          # to keep results consistent (numpy seed)\n",
    "    (m_train, n_H0, n_W0, n_C0) = X_train.shape\n",
    "    (m_test,_ ,_ ,_ ) = X_test.shape             \n",
    "\n",
    "\n",
    "    n_y = Y_train.shape[1]                            \n",
    "    costs = []                                        # To keep track of the cost\n",
    "    the_accuracy = []\n",
    "    the_recall = []\n",
    "    # Create Placeholders of the correct shape\n",
    "    ### START CODE HERE ### (1 line)\n",
    "    X, Y = create_placeholders(n_H0, n_W0, n_C0, n_y)\n",
    "    ### END CODE HERE ###\n",
    "\n",
    "    # Initialize parameters\n",
    "    ### START CODE HERE ### (1 line)\n",
    "    parameters = initialize_parameters()\n",
    "    ### END CODE HERE ###\n",
    "    \n",
    "    # Forward propagation: Build the forward propagation in the tensorflow graph\n",
    "    ### START CODE HERE ### (1 line)\n",
    "    Z4 = forward_propagation(X, parameters)\n",
    "    ### END CODE HERE ###\n",
    "    \n",
    "    # Cost function: Add cost function to tensorflow graph\n",
    "    ### START CODE HERE ### (1 line)\n",
    "    cost = compute_cost(Z4, Y)\n",
    "    ### END CODE HERE ###\n",
    "    \n",
    "    # Backpropagation: Define the tensorflow optimizer. Use an AdamOptimizer that minimizes the cost.\n",
    "    ### START CODE HERE ### (1 line)\n",
    "    optimizer = tf.train.AdamOptimizer(learning_rate=learning_rate).minimize(cost)\n",
    "    ### END CODE HERE ###\n",
    "    \n",
    "    # Initialize all the variables globally\n",
    "    init = tf.global_variables_initializer()\n",
    "     \n",
    "    # Start the session to compute the tensorflow graph\n",
    "    with tf.Session() as sess:\n",
    "        \n",
    "        # Run the initialization\n",
    "        sess.run(init)\n",
    "        \n",
    "        # Do the training loop\n",
    "        for epoch in range(num_epochs):\n",
    "\n",
    "            minibatch_cost_train = 0.\n",
    "            minibatch_cost_test = 0\n",
    "            num_minibatches_train = int(m / minibatch_size) # number of minibatches of size minibatch_size in the train set\n",
    "            seed = seed + 1\n",
    "            minibatches_train = random_mini_batches(X_train, Y_train, minibatch_size, seed)\n",
    "            minibatches_test = random_mini_batches(X_test, Y_test, minibatch_size, seed)\n",
    "            minibatches\n",
    "\n",
    "            for minibatch in minibatches_train:\n",
    "\n",
    "                # Select a minibatch\n",
    "                (minibatch_X, minibatch_Y) = minibatch\n",
    "                # IMPORTANT: The line that runs the graph on a minibatch.\n",
    "                # Run the session to execute the optimizer and the cost, the feedict should contain a minibatch for (X,Y).\n",
    "                ### START CODE HERE ### (1 line)\n",
    "                _ , temp_cost = sess.run((optimizer,cost),feed_dict={X:minibatch_X, Y:minibatch_Y})\n",
    "                ### END CODE HERE ###\n",
    "                \n",
    "                minibatch_cost_train += temp_cost / num_minibatches\n",
    "                \n",
    "            for minibatch in minibatches_test:\n",
    "\n",
    "                # Select a minibatch\n",
    "                (minibatch_X, minibatch_Y) = minibatch\n",
    "                # IMPORTANT: The line that runs the graph on a minibatch.\n",
    "                # Run the session to execute the optimizer and the cost, the feedict should contain a minibatch for (X,Y).\n",
    "                ### START CODE HERE ### (1 line)\n",
    "                _ , temp_cost = sess.run((optimizer,cost),feed_dict={X:minibatch_X, Y:minibatch_Y})\n",
    "                ### END CODE HERE ###\n",
    "                \n",
    "                minibatch_cost_train += temp_cost / num_minibatches           \n",
    "            # Print the cost every epoch\n",
    "            if print_cost == True :\n",
    "                print (\"Cost after epoch %i: %f\" % (epoch, minibatch_cost))\n",
    "    \n",
    "            if print_cost == True :\n",
    "                costs.append(minibatch_cost)\n",
    "            # Calculate the correct predictions\n",
    "            \n",
    "            \n",
    "            \n",
    "            \"\"\"\n",
    "            # plot the cost\n",
    "            plt.plot(np.squeeze(costs))\n",
    "            plt.ylabel('cost')\n",
    "            plt.xlabel('iterations (per tens)')\n",
    "            plt.title(\"Learning rate =\" + str(learning_rate))\n",
    "            plt.show()\n",
    "            \"\"\"\n",
    "            # Calculate the correct predictions\n",
    "            predict_op = tf.argmax(Z4, axis = 1)\n",
    "            correct_prediction = tf.equal(predict_op, tf.argmax(Y, axis = 1))\n",
    "\n",
    "            # Calculate accuracy on the test set\n",
    "            accuracy = tf.reduce_mean(tf.cast(correct_prediction, \"float\"))\n",
    "            # Rec, Rec_op = tf.metrics.recall(labels = tf.argmax(Y, axis = 1), predictions = predict_op)\n",
    "            # recall = tf.metrics.recall(tf.argmax(Y, axis = 1), predict_op)\n",
    "            print(accuracy)\n",
    "            train_accuracy = accuracy.eval({X: X_train, Y: Y_train})\n",
    "            test_accuracy = accuracy.eval({X: X_test, Y: Y_test})\n",
    "            predicted = sess.run(predict_op, feed_dict = {X: X_test, Y: Y_test})\n",
    "            Y_real = sess.run(tf.argmax(Y, axis = 1), feed_dict={Y:Y_test})\n",
    "            test_recall = recall_score(Y_real, predicted)\n",
    "            the_recall.append(test_recall)\n",
    "            the_accuracy.append((train_accuracy,test_accuracy))\n",
    "            \n",
    "            \n",
    "\n",
    "\n",
    "            print(\"the results for the learning rate : \" + str(learning_rate) + \"are : \")\n",
    "            print(\"Train Accuracy:\", train_accuracy)\n",
    "            print(\"Test Accuracy:\", test_accuracy)\n",
    "            print(\"Recall:\", test_recall)\n",
    "\n",
    "\n",
    "            print(\"\\n\")\n",
    "        return train_accuracy, test_accuracy, parameters, the_accuracy, the_recall"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1 3\n",
      "2 4\n"
     ]
    }
   ],
   "source": [
    "A = ([1,3],[2,4])\n",
    "for i,j in A:\n",
    "    print(i,j)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Run the following cell to train your model for 100 epochs. Check if your cost after epoch 0 and 5 matches our output. If not, stop the cell and go back to your code!"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 91,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Cost after epoch 0: 0.728948\n",
      "Tensor(\"Mean_1:0\", shape=(), dtype=float32)\n",
      "the results for the learning rate : 0.005are : \n",
      "Train Accuracy: 0.52238804\n",
      "Test Accuracy: 0.50151515\n",
      "Recall: 0.9875389408099688\n",
      "\n",
      "\n",
      "Cost after epoch 1: 0.706106\n",
      "Tensor(\"Mean_2:0\", shape=(), dtype=float32)\n",
      "the results for the learning rate : 0.005are : \n",
      "Train Accuracy: 0.62761194\n",
      "Test Accuracy: 0.6212121\n",
      "Recall: 0.45794392523364486\n",
      "\n",
      "\n",
      "Cost after epoch 2: 0.673448\n",
      "Tensor(\"Mean_3:0\", shape=(), dtype=float32)\n",
      "the results for the learning rate : 0.005are : \n",
      "Train Accuracy: 0.73731345\n",
      "Test Accuracy: 0.71666664\n",
      "Recall: 0.7570093457943925\n",
      "\n",
      "\n",
      "Cost after epoch 3: 0.552064\n",
      "Tensor(\"Mean_4:0\", shape=(), dtype=float32)\n",
      "the results for the learning rate : 0.005are : \n",
      "Train Accuracy: 0.8208955\n",
      "Test Accuracy: 0.77878785\n",
      "Recall: 0.735202492211838\n",
      "\n",
      "\n",
      "Cost after epoch 4: 0.422192\n",
      "Tensor(\"Mean_5:0\", shape=(), dtype=float32)\n",
      "the results for the learning rate : 0.005are : \n",
      "Train Accuracy: 0.8753731\n",
      "Test Accuracy: 0.8424242\n",
      "Recall: 0.8411214953271028\n",
      "\n",
      "\n",
      "Cost after epoch 5: 0.297559\n",
      "Tensor(\"Mean_6:0\", shape=(), dtype=float32)\n",
      "the results for the learning rate : 0.005are : \n",
      "Train Accuracy: 0.9246269\n",
      "Test Accuracy: 0.8848485\n",
      "Recall: 0.8660436137071651\n",
      "\n",
      "\n",
      "Cost after epoch 6: 0.220364\n",
      "Tensor(\"Mean_7:0\", shape=(), dtype=float32)\n",
      "the results for the learning rate : 0.005are : \n",
      "Train Accuracy: 0.930597\n",
      "Test Accuracy: 0.8954545\n",
      "Recall: 0.8442367601246106\n",
      "\n",
      "\n",
      "Cost after epoch 7: 0.183780\n",
      "Tensor(\"Mean_8:0\", shape=(), dtype=float32)\n",
      "the results for the learning rate : 0.005are : \n",
      "Train Accuracy: 0.9522388\n",
      "Test Accuracy: 0.9166667\n",
      "Recall: 0.8940809968847352\n",
      "\n",
      "\n",
      "Cost after epoch 8: 0.156355\n",
      "Tensor(\"Mean_9:0\", shape=(), dtype=float32)\n",
      "the results for the learning rate : 0.005are : \n",
      "Train Accuracy: 0.9522388\n",
      "Test Accuracy: 0.93030304\n",
      "Recall: 0.9501557632398754\n",
      "\n",
      "\n",
      "Cost after epoch 9: 0.156267\n",
      "Tensor(\"Mean_10:0\", shape=(), dtype=float32)\n",
      "the results for the learning rate : 0.005are : \n",
      "Train Accuracy: 0.94925374\n",
      "Test Accuracy: 0.92424244\n",
      "Recall: 0.9657320872274143\n",
      "\n",
      "\n",
      "Cost after epoch 10: 0.125302\n",
      "Tensor(\"Mean_11:0\", shape=(), dtype=float32)\n",
      "the results for the learning rate : 0.005are : \n",
      "Train Accuracy: 0.96567166\n",
      "Test Accuracy: 0.92727274\n",
      "Recall: 0.897196261682243\n",
      "\n",
      "\n",
      "Cost after epoch 11: 0.107325\n",
      "Tensor(\"Mean_12:0\", shape=(), dtype=float32)\n",
      "the results for the learning rate : 0.005are : \n",
      "Train Accuracy: 0.96791047\n",
      "Test Accuracy: 0.9227273\n",
      "Recall: 0.8940809968847352\n",
      "\n",
      "\n",
      "Cost after epoch 12: 0.093049\n",
      "Tensor(\"Mean_13:0\", shape=(), dtype=float32)\n",
      "the results for the learning rate : 0.005are : \n",
      "Train Accuracy: 0.97761196\n",
      "Test Accuracy: 0.93030304\n",
      "Recall: 0.9501557632398754\n",
      "\n",
      "\n",
      "Cost after epoch 13: 0.106322\n",
      "Tensor(\"Mean_14:0\", shape=(), dtype=float32)\n",
      "the results for the learning rate : 0.005are : \n",
      "Train Accuracy: 0.97462684\n",
      "Test Accuracy: 0.919697\n",
      "Recall: 0.897196261682243\n",
      "\n",
      "\n",
      "Cost after epoch 14: 0.083446\n",
      "Tensor(\"Mean_15:0\", shape=(), dtype=float32)\n",
      "the results for the learning rate : 0.005are : \n",
      "Train Accuracy: 0.97761196\n",
      "Test Accuracy: 0.93030304\n",
      "Recall: 0.9314641744548287\n",
      "\n",
      "\n",
      "Cost after epoch 15: 0.063386\n",
      "Tensor(\"Mean_16:0\", shape=(), dtype=float32)\n",
      "the results for the learning rate : 0.005are : \n",
      "Train Accuracy: 0.9902985\n",
      "Test Accuracy: 0.9348485\n",
      "Recall: 0.9376947040498442\n",
      "\n",
      "\n",
      "Cost after epoch 16: 0.041451\n",
      "Tensor(\"Mean_17:0\", shape=(), dtype=float32)\n",
      "the results for the learning rate : 0.005are : \n",
      "Train Accuracy: 0.9955224\n",
      "Test Accuracy: 0.93030304\n",
      "Recall: 0.9376947040498442\n",
      "\n",
      "\n",
      "Cost after epoch 17: 0.030581\n",
      "Tensor(\"Mean_18:0\", shape=(), dtype=float32)\n",
      "the results for the learning rate : 0.005are : \n",
      "Train Accuracy: 0.98656714\n",
      "Test Accuracy: 0.93030304\n",
      "Recall: 0.8940809968847352\n",
      "\n",
      "\n",
      "Cost after epoch 18: 0.020308\n",
      "Tensor(\"Mean_19:0\", shape=(), dtype=float32)\n",
      "the results for the learning rate : 0.005are : \n",
      "Train Accuracy: 1.0\n",
      "Test Accuracy: 0.9318182\n",
      "Recall: 0.9283489096573209\n",
      "\n",
      "\n",
      "Cost after epoch 19: 0.013311\n",
      "Tensor(\"Mean_20:0\", shape=(), dtype=float32)\n",
      "the results for the learning rate : 0.005are : \n",
      "Train Accuracy: 1.0\n",
      "Test Accuracy: 0.9227273\n",
      "Recall: 0.9252336448598131\n",
      "\n",
      "\n",
      "Cost after epoch 20: 0.013612\n",
      "Tensor(\"Mean_21:0\", shape=(), dtype=float32)\n",
      "the results for the learning rate : 0.005are : \n",
      "Train Accuracy: 0.99701494\n",
      "Test Accuracy: 0.92424244\n",
      "Recall: 0.8940809968847352\n",
      "\n",
      "\n",
      "Cost after epoch 21: 0.008351\n",
      "Tensor(\"Mean_22:0\", shape=(), dtype=float32)\n",
      "the results for the learning rate : 0.005are : \n",
      "Train Accuracy: 1.0\n",
      "Test Accuracy: 0.9257576\n",
      "Recall: 0.9221183800623053\n",
      "\n",
      "\n",
      "Cost after epoch 22: 0.005442\n",
      "Tensor(\"Mean_23:0\", shape=(), dtype=float32)\n",
      "the results for the learning rate : 0.005are : \n",
      "Train Accuracy: 1.0\n",
      "Test Accuracy: 0.9227273\n",
      "Recall: 0.9096573208722741\n",
      "\n",
      "\n",
      "Cost after epoch 23: 0.002909\n",
      "Tensor(\"Mean_24:0\", shape=(), dtype=float32)\n",
      "the results for the learning rate : 0.005are : \n",
      "Train Accuracy: 1.0\n",
      "Test Accuracy: 0.9227273\n",
      "Recall: 0.9127725856697819\n",
      "\n",
      "\n",
      "Cost after epoch 24: 0.002299\n",
      "Tensor(\"Mean_25:0\", shape=(), dtype=float32)\n",
      "the results for the learning rate : 0.005are : \n",
      "Train Accuracy: 1.0\n",
      "Test Accuracy: 0.9257576\n",
      "Recall: 0.9314641744548287\n",
      "\n",
      "\n",
      "Cost after epoch 25: 0.001759\n",
      "Tensor(\"Mean_26:0\", shape=(), dtype=float32)\n",
      "the results for the learning rate : 0.005are : \n",
      "Train Accuracy: 1.0\n",
      "Test Accuracy: 0.92424244\n",
      "Recall: 0.9252336448598131\n",
      "\n",
      "\n",
      "Cost after epoch 26: 0.001532\n",
      "Tensor(\"Mean_27:0\", shape=(), dtype=float32)\n",
      "the results for the learning rate : 0.005are : \n",
      "Train Accuracy: 1.0\n",
      "Test Accuracy: 0.92121214\n",
      "Recall: 0.9158878504672897\n",
      "\n",
      "\n",
      "Cost after epoch 27: 0.001318\n",
      "Tensor(\"Mean_28:0\", shape=(), dtype=float32)\n",
      "the results for the learning rate : 0.005are : \n",
      "Train Accuracy: 1.0\n",
      "Test Accuracy: 0.92121214\n",
      "Recall: 0.9158878504672897\n",
      "\n",
      "\n",
      "Cost after epoch 28: 0.001116\n",
      "Tensor(\"Mean_29:0\", shape=(), dtype=float32)\n",
      "the results for the learning rate : 0.005are : \n",
      "Train Accuracy: 1.0\n",
      "Test Accuracy: 0.9227273\n",
      "Recall: 0.9190031152647975\n",
      "\n",
      "\n",
      "Cost after epoch 29: 0.000941\n",
      "Tensor(\"Mean_30:0\", shape=(), dtype=float32)\n",
      "the results for the learning rate : 0.005are : \n",
      "Train Accuracy: 1.0\n",
      "Test Accuracy: 0.92424244\n",
      "Recall: 0.9221183800623053\n",
      "\n",
      "\n"
     ]
    }
   ],
   "source": [
    "_, _, parameters, the_accuracy, the_recall = model(X_train, Y_train, X_test, Y_test, learning_rate = 0.005, num_epochs = 30)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 95,
   "metadata": {},
   "outputs": [],
   "source": [
    "the_accuracy_train = []\n",
    "the_accuracy_test = []\n",
    "for x in the_accuracy:\n",
    "    the_accuracy_train.append(x[0])\n",
    "    the_accuracy_test.append(x[1])   "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "np.save(\"the_recall\", the_recall)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 96,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[0.52238804,\n",
       " 0.62761194,\n",
       " 0.73731345,\n",
       " 0.8208955,\n",
       " 0.8753731,\n",
       " 0.9246269,\n",
       " 0.930597,\n",
       " 0.9522388,\n",
       " 0.9522388,\n",
       " 0.94925374,\n",
       " 0.96567166,\n",
       " 0.96791047,\n",
       " 0.97761196,\n",
       " 0.97462684,\n",
       " 0.97761196,\n",
       " 0.9902985,\n",
       " 0.9955224,\n",
       " 0.98656714,\n",
       " 1.0,\n",
       " 1.0,\n",
       " 0.99701494,\n",
       " 1.0,\n",
       " 1.0,\n",
       " 1.0,\n",
       " 1.0,\n",
       " 1.0,\n",
       " 1.0,\n",
       " 1.0,\n",
       " 1.0,\n",
       " 1.0]"
      ]
     },
     "execution_count": 96,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "the_accuracy_train"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 125,
   "metadata": {},
   "outputs": [],
   "source": [
    "the_accuracy_test = np.multiply(the_accuracy_test, 100)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 98,
   "metadata": {},
   "outputs": [],
   "source": [
    "np.save(\"the_accuracy_train\", the_accuracy_train)\n",
    "np.save(\"the_accuracy_test\", the_accuracy_test)\n",
    "np.save(\"the_accuracy\", the_accuracy)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 99,
   "metadata": {},
   "outputs": [],
   "source": [
    "the_accuracy_test = the_accuracy_test*100\n",
    "the_accuracy_train = the_accuracy_train*100\n",
    "the_recall = the_recall*100"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 114,
   "metadata": {},
   "outputs": [],
   "source": [
    "the_recall = the_recall[0:30]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 115,
   "metadata": {},
   "outputs": [],
   "source": [
    "the_recall = np.multiply(the_recall,100)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 119,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([ 52.238804,  62.761192,  73.731346,  82.08955 ,  87.537315,\n",
       "        92.46269 ,  93.0597  ,  95.22388 ,  95.22388 ,  94.92538 ,\n",
       "        96.56717 ,  96.791046,  97.76119 ,  97.462685,  97.76119 ,\n",
       "        99.029854,  99.55224 ,  98.656715, 100.      , 100.      ,\n",
       "        99.70149 , 100.      , 100.      , 100.      , 100.      ,\n",
       "       100.      , 100.      , 100.      , 100.      , 100.      ],\n",
       "      dtype=float32)"
      ]
     },
     "execution_count": 119,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "the_accuracy_train"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 101,
   "metadata": {},
   "outputs": [],
   "source": [
    "epochs = np.arange(1,31)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 102,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n",
       "       18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30])"
      ]
     },
     "execution_count": 102,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "epochs"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 153,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x1a1cd5c128>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=(16,10)) # we give the shape of the figure\n",
    "plt.plot(epochs, the_accuracy_train, marker = \"o\", label = 'Train accuracy', linewidth=1) # plot the graph (ranks, frequency) of the corpus Gutenberg with stopwords \n",
    "plt.plot(epochs, the_accuracy_test, marker = \"o\", label = 'Test accuracy', linewidth=1) # plot the graph (ranks, frequency) of the corpus Gutenberg without stopwords\n",
    "plt.plot(epochs, the_recall, marker = \"o\", label = 'Test recall', linewidth=1) # plot the graph (ranks, frequency) of the corpus Brown with stopwords\n",
    "#plt.xlabel('Number of epochs') # We give a label to our x Axis\n",
    "#plt.ylabel('Percentage %') # We give a label to our y Axis\n",
    "#plt.title('Model performances') # Give a title to the figure\n",
    "# plt.xscale('log') # we use a logarithmic scale for the x axis\n",
    "# plt.yscale('log') # we use a logarithmic scale for the Y axis\n",
    "plt.xlim(xmin = 1) # we set the x axe to begin  from 1\n",
    "#plt.ylim(ymin = 1) # we set the y axe to begin  from 1\n",
    "plt.legend() # make a legend for each curves \n",
    "plt.show() # Show the result"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 124,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[0.50151515,\n",
       " 0.6212121,\n",
       " 0.71666664,\n",
       " 0.77878785,\n",
       " 0.8424242,\n",
       " 0.8848485,\n",
       " 0.8954545,\n",
       " 0.9166667,\n",
       " 0.93030304,\n",
       " 0.92424244,\n",
       " 0.92727274,\n",
       " 0.9227273,\n",
       " 0.93030304,\n",
       " 0.919697,\n",
       " 0.93030304,\n",
       " 0.9348485,\n",
       " 0.93030304,\n",
       " 0.93030304,\n",
       " 0.9318182,\n",
       " 0.9227273,\n",
       " 0.92424244,\n",
       " 0.9257576,\n",
       " 0.9227273,\n",
       " 0.9227273,\n",
       " 0.9257576,\n",
       " 0.92424244,\n",
       " 0.92121214,\n",
       " 0.92121214,\n",
       " 0.9227273,\n",
       " 0.92424244]"
      ]
     },
     "execution_count": 124,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "the_accuracy_test"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 147,
   "metadata": {},
   "outputs": [],
   "source": [
    "cost = [0.728948, 0.706106, 0.673448, 0.552064, 0.422192, 0.297559, 0.220364, 0.183780, 0.156355, 0.156267, 0.125302, 0.107325, 0.093049, 0.106322, 0.083446, 0.063386, 0.041451, 0.030581, 0.020308, 0.013311, 0.013612, 0.008351, 0.005442, 0.002909, 0.002299, 0.001759, 0.001532, 0.001318, 0.001116, 0.000941]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 148,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "30"
      ]
     },
     "execution_count": 148,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(cost)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 155,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x1a1ab95780>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=(16,10)) # we give the shape of the figure\n",
    "plt.plot(epochs, cost, marker = \"o\", label = 'Recall', linewidth=1) # plot the graph (ranks, frequency) of the corpus Brown with stopwords\n",
    "#plt.xlabel('Number of epochs') # We give a label to our x Axis\n",
    "#plt.ylabel('Loss') # We give a label to our y Axis\n",
    "#plt.title('Loss model') # Give a title to the figure\n",
    "# plt.xscale('log') # we use a logarithmic scale for the x axis\n",
    "# plt.yscale('log') # we use a logarithmic scale for the Y axis\n",
    "plt.xlim(xmin = 1) # we set the x axe to begin  from 1\n",
    "#plt.ylim(ymin = 1) # we set the y axe to begin  from 1\n",
    "plt.legend() # make a legend for each curves \n",
    "plt.show() # Show the result"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "coursera": {
   "course_slug": "convolutional-neural-networks",
   "graded_item_id": "bwbJV",
   "launcher_item_id": "0TkXB"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 1
}
